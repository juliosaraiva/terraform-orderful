name: CI - Development

on:
  pull_request:
    types:
      - synchronize
    branches:
      - dev
  workflow_dispatch:
    inputs:
      cmd:
        description: Terraform command
        default: destroy
        required: true

env:
  TERRAFORM_VERSION: 1.2.7
  AWS_DEFAULT_REGION: us-east-1
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_IN_AUTOMATION: true
jobs:
  terraform_check:
    name: Check for development
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: development
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
        continue-on-error: true
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  terraform_deploy:
    if: github.event_name == 'pull_request'
    needs: terraform_check
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: development
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color
      - uses: actions/github-script@v6
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  terraform_destroy:
    if: github.event_name == 'pull_request'
    needs: terraform_deploy
    name: Terraform Destroy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: development
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -no-color
      - uses: actions/github-script@v6
        env:
          DESTROY: "terraform\n${{ steps.destroy.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Destroy üìñ\`${{ steps.destroy.outcome }}\`

            <details><summary>Show Destroy</summary>

            \`\`\`\n
            ${process.env.DESTROY}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
